////知识点6 函数指针数组
//int add(int x,int y)
//{
//    return x+y;
//}
//int sub(int x,int y)
//{
//    return x-y;
//}
//int mul(int x,int y)
//{
//    return x*y;
//}
//int Div(int x,int y)
//{
//    return x/y;
//}
//int main()
//{
//    int* arr[5];//指针数组
//    //需要一个数组，这个数组可以存放4个函数的地址，是一个函数指针数组
//    int (*pa)(int ,int )=add;//sub//mul//div 这几个函数都可以用pa来存放
//    int (*parr[4])(int ,int )={add,sub,mul,Div};//函数指针数组
//    int i=0;
//    for(i=0;i<4;i++)
//    {
//        printf("%d ",parr[i](2,3)); // 5 -1 6 0
//    }
//    return 0;
//}
////练习题
//char* my_stycpy(char* dest,const char* src)
////写一个函数指针pf，能够指向my_strcpy
////写一个函数指针数组，能够存放4个my_strcpy的地址
//(char* )(*pf)(char* ,const char*)=my_strcpy;
//(char* )(*pfarr[4])(char* ,const char*)={my_strcpy};

//例子 函数指针的用途 转移表
//计算器
//1.正常版本 不使用函数指针数组
//void menu()
//{
//    printf("**  1.add        2.sub  **\n");
//    printf("**  3.mul        4.Div  **\n");
//    printf("**         0.exit       **\n");
//    printf("**************************\n");
//}
//int add(int x,int y)
//{
//    return x+y;
//}
//int sub(int x,int y)
//{
//    return x-y;
//}
//int mul(int x,int y)
//{
//    return x*y;
//}
//int Div(int x,int y)
//{
//    return x/y;
//}
//int main()
//{
//    int input,x,y;
//    do
//    {
//    menu();
//    printf("请选择:>");
//    scanf("%d",&input);
//    switch(input)
//    {
//        case 1:
//            printf("请输入两个操作数:>");
//            scanf("%d%d",&x,&y);
//            printf("%d\n",add(x,y));
//            break;
//        case 2:
//            printf("请输入两个操作数:>");
//            scanf("%d%d",&x,&y);
//            printf("%d\n",sub(x,y));
//            break;
//        case 3:
//            printf("请输入两个操作数:>");
//            scanf("%d%d",&x,&y);
//            printf("%d\n",mul(x,y));
//            break;
//        case 4:
//            printf("请输入两个操作数:>");
//            scanf("%d%d",&x,&y);
//            printf("%d\n",Div(x,y));
//            break;
//        case 0:
//            printf("退出");
//            break;
//        default:
//            printf("选择错误，请重新选择！\n");
//            break;
//    }
//        }while(input);
//
//    return 0;
//}
//这样去写，我们不难发现，如果计算器功能越多，辣么case语句就越多，代码就会更冗长，所以需要加工！

////2.加强版本 函数指针数组  想要增加函数功能也很简单  比如增加一个按位异或
//void menu()
//{
//    printf("**  1.add        2.sub  **\n");
//    printf("**  3.mul        4.Div  **\n");
//    printf("**  5.xor        0.exit  **\n");
//    printf("**************************\n");
//}
//int add(int x,int y)
//{
//    return x+y;
//}
//int sub(int x,int y)
//{
//    return x-y;
//}
//int mul(int x,int y)
//{
//    return x*y;
//}
//int Div(int x,int y)
//{
//    return x/y;
//}
//int xor(int x,int y)
//{
//    return x^y;
//}
//int main()
//{
//    int input,x,y;
//    //函数指针数组
//    int (*pfarr[6])(int ,int )={0,add,sub,mul,Div,xor};
//    do
//    {
//    menu();
//    printf("请选择:>");
//    scanf("%d",&input);
//    if(1<=input&&input<=(sizeof(pfarr)/sizeof(pfarr[0])-1))
//    {
//         printf("请输入两个操作数:>");
//         scanf("%d%d",&x,&y);
//        printf("%d\n",pfarr[input](x,y));
//    }
//    else if(input==0)
//        printf("退出\n");
//    else
//        printf("输入错误，请重新输入！\n");
//    }while(input);
//
//    return 0;
//}

////知识点7 指向函数指针数组的指针 
//int add(int x, int y)
//{
//    return x+y;
//}
//int main()
//{
//    int arr[4]={0};//整形数组
//    int (*p)[4]=&arr;//存放整形数组地址
//    
//    int (*p)(int ,int );//函数指针
//    int (*pfarr[4])(int ,int ) = {0}; //函数指针数组
//    int (*(*ppfarr)[4])(int ,int )=&pfarr; //存放函数指针数组的地址 ppfarr先和*结合说明是一个指针 指向[4]数组 每个数组4个元素 元素类型 int (*)(int ,int ) 
//    //函数指针数组 
//    return 0;
//}