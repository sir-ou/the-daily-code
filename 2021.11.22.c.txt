// //函数实现二分查找一个数
// int binary_search(int arr[],int k)
// {
//     //算法的实现
//     int left=0;
//     int sz=sizeof(arr)/sizeof(arr[0]);
//     int right=sz-1;
//     while(left<=right)
//     {
//
//     int mid=(left+right)/2;//中间元素下标
//     if(arr[mid]<k)
//        left=mid+1;
//     else if(arr[mid]>k)
//        right=mid-1;
//     else
//        return mid;
//
//     }
//    if(left>right)
//         return -1;
// }
//
// int main()
// {
//     //二分查找
//     //在一个有序素组中具体查找某个数
//     //如果找到了，返回这个下标，如果找不到，返回-1。
//     int arr[]={1,2,3,4,5,6,7,8,9,10};
//     int k=7;
//     int ret=binary_search(arr,k);
//     if(ret==-1)
//        printf("找不到这个数\n");
//     else
//        printf("找到了，下标是：%d\n",ret);
//     return 0;
// }
//
//


// //函数实现判断素数
// int is_prime(int n)
// {
//     int j;
//     for(j=2;j<=sqrt(n)+1;j++)
//     {
//     if(n%j==0)
//
//         return 0;
//     }
//      return 1;
// }
//int main()
//{
//    int i=0;
//    for(i=101;i<=200;i+=2)
//    {
//        if(is_prime(i)==1)
//            printf("%d ",i);
//    }
//    return 0;
//}



// //自定义交换函数
// //swap1为错误示范，swap2为正确操作
// //当实参给形参传递值的时候
// //形参其实是实参的一份临时拷贝
// //形参的修改是不会影响实参的
//  void swap1(int x,int y)
// {
//     int tem;
//     tem=x;//x有了一个地址
//     x=y;//y有了一个地址
//     y=tem;
//
// }
// void swap2(int* pa,int* pb)
// {
//     int tem;
//     tem=*pa;
//     *pa=*pb;
//     *pb=tem;
// }
// int main()
// {
//     int a=10;//a有了一个地址
//     int b=20;//b有了一个地址
//     int tem;
//     //
//     tem=a;
//     a=b;
//     b=tem;
//     //
//     printf("a=%d b=%d\n",a,b);
//     //函数实现
//     //传值调用，函数的形参和实参分别调用不同的内存块，对形参的修改不改变实参。
////     swap1(a,b);//不需要返回值，故返回值类型为void，空值，我的x，y，的值被交换了，但是a，b没有被交换，原因是地址不相同。
//     //传址调用，把实参地址传给形参，可以直接修改
//     swap2(&a,&b);
//     printf("a=%d b=%d\n",a,b);
//     return 0;
// }
//
//

