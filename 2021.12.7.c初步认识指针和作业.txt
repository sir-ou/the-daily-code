////问题b指针题目03
//void myAdjust(int* p,int n,int m)
//{
//    int i;
//    int a[n];
//    for(i=0;i<m;i++)
//        a[i]=p[n-m+i];
//    for(i=0;i<n-m;i++)
//        a[i+m]=p[i];
//    for(i=0;i<n;i++)
//      printf("%d ",a[i]);
//}
//int main()
//{
//    int n,i,j,m;
//    scanf("%d",&n);
//    scanf("%d",&m);
//    int arr[n];
//    for(i=0;i<n;i++)
//        scanf("%d",&arr[i]);
//    myAdjust(arr,n,m);
//    return 0;
//}
//p216
////t8判断回文
//int main()
//{
//    char arr[100];
//    gets(arr);
//    int sz=strlen(arr);
//    int i=0;
//    int flag=0;
//        while(i<=sz-i-1)
//        {
//            if(arr[i]==arr[sz-i-1])
//                  flag++;
//            i++;
//        }
//   if(sz%2==0&&sz/2==flag)
//        printf("是回文\n");
//   else if(sz%2==1&&(sz/2)+1==flag)
//        printf("是回文\n");
//   else
//        printf("不是回文\n");
//    return 0;
//}
// 指针来了！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

////知识点2 指针+-整数 指针类型决定了：指针一步走多远 （指针的步长）
//int main()
//{
//    int a=0x11223344;                   //int* p：p+1 -->4个字节
//    int* pa=&a;                         //char* p：p+1 -->1个字节
//    char* pc=&a;
//    printf("%p\n",pa);
//    printf("%p\n",pa+1);//地址向后增加了4个字节
//
//    printf("%p\n",pc);
//    printf("%p\n",pc+1);//地址向后增加了1个字节
//
//    return 0;
//}
//例子
int main()
{
    int arr[10]={0};
    int* p=arr;//arr数组名-首元素地址
    int i=0;
    for(i=0;i<10;i++)
        *(p+i)=1;
    for(i=0;i<10;i++)
       printf("%d ",arr[i]);
    return 0;
}

////知识点1 32位机地址4字节  64位机地址8字节 不因类型不同而改变  *****指针类型决定指针进行解引用后能访问空间的大小******
//int main()
//{
////    printf("%d\n",sizeof(char*));
////    printf("%d\n",sizeof(short*));
////    printf("%d\n",sizeof(int*));
////    printf("%d\n",sizeof(double*));
////  既然大家地址都是8个字节，为什么不用统一的一个类型来表示呢？区分指针类型的意义在哪里呢？
//    int a=0x111;//16进制数，一个8字节  0001 0001 0001 256+16+1
////    int* pa=&a;
////       *pa=0;
//    printf("%d\n",a);//*pa将a中8个字节全部修改为0
//     char* pb=&a;
//        *pb=0;    //0001 0000 0000
//    printf("%d\n",a);//*pb只讲a中一个字节修改为0，且是首字节
////    printf("%p\n",pa);//两次打印效果一样
////    printf("%p\n",pb);
//    return 0;
//}
