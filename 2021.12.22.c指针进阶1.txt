 //指针进阶！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
// //知识点1 字符指针
//例1
// int main()
// {
//     char arr[]="abcdef";
//     char* p=arr;//数组名为首元素地址
//     printf("%s\n",arr);//abcdef
//     printf("%s\n",p);//abcdef
//     return 0;
// }
////例2
//int main()
//{
//    const  char* p="abcdef";//"abcdef"是一个常量字符串 加const是为了保护我的常量字符串 使不会被更改
//    printf("%c\n",*p);//p存放的是首元素a的地址
//    printf("%c\n",*(p+1));
//    printf("%s\n",p);
//    //为什么说是一个常量字符串呢？
////      *p='w';//程序会崩溃 得不出结果 segmentation fault - 段错误
//    printf("%s\n",p);
//    return 0;
//}
//例3
//int main()
//{
//    char arr1[]="abcdef";
//    char arr2[]="abcdef";
//    const char* p1="abcdef";
//    const char* p2="abcdef";
////    if(arr1==arr2)
////        printf("hehe\n");
////    else
////        printf("haha\n");
//      //结果为haha 因为arr1 和 arr2 是同一时间创建，地址不一样
//
//    if(p1==p2)
//        printf("hehe\n");
//    else
//        printf("haha\n");
//    //同一个常量字符串“abcdef” 地址不能被改变 故p1 和p2 拿到的第一个元素地址是相同的
//    return 0;
//}
//知识点2 指针数组
//指针数组 是数组 用来存放指针的
//int main()
//{
//    int arr[10]={0};//整形数组
//    char ch[5]={0};//字符数组
//    int* parr[5];//整形指针数组 - 指针数组
//    char* pch[4];//字符型指针数组 - 指针数组
//    return 0;
//}
////例1
//int main()
//{
//    int a=10;
//    int b=20;
//    int c=30;
//    int d=40;
//    int* arr[4]={&a,&b,&c,&d};
//    int i=0;
//    for(i=0;i<4;i++)
//        printf("%d\n",*arr[i]);
//    //指针数组可不是这么用的啊，往后看吧！
//    return 0;

////例2 正确用法
//int main()
//{
//    int arr1[5]={1,2,3,4,5};
//    int arr2[5]={2,3,4,5,6};
//    int arr3[5]={3,4,5,6,7};
//    int* parr[3]={arr1,arr2,arr3};
//    int i=0;
//    for(i=0;i<3;i++)
//    {
//        int j=0;
//        for(j=0;j<5;j++)//打印每一行
//            printf("%d ",*(parr[i]+j));
//        printf("\n");
//    }
//    return 0;
//}

////知识点3 数组指针 是指针 是用来存放数组地址的
//int main()
//{
////    int* p=NULL;//p是整形指针-指向整形的指针-可以存放整形的地址
////    char* pc=NULL;//pc是字符指针 - 指向字符的指针 - 可以存放字符的地址
//                  //数组指针 - 指向数组的指针 - 可以存放数组的指针
////    int arr[10]={0};
////    arr - 首元素地址
////    &arr[0] - 首元素地址
////    &arr - 数组地址
//    int arr[10]={1,2,3,4,5,6,7,8,9,10};//把我的arr数组存起来
//    int (*p)[10]=&arr;//此时的p就是一个数组指针 由于[]优先级大于* 故需要（）
//    int a=*p[0];
//    printf("%d ",a);
//    return 0;
//}
////例1 练习写数组指针
//int main()
//{
//    char* arr[5];
//    //pa=&arr?  怎么补充？
//    char* (*pa)[5]=&arr; 
    // char* 是数组的元素类型
    // pa 是指针名字
    // [5] 是所指向的数组有5个元素
    // pa 前面的 * 告诉我 pa 是一个指针
//    int arr2[10]={0};
//    int (*pa2)[10]=&arr2;
//    return 0;
//}