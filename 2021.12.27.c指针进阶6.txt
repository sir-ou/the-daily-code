//知识点8 回调函数 - 就是通过函数指针调用函数 这个函数就被称之为回调函数
//1.正常版本 不使用函数指针数组
//现在对我的正常版本进行加工 使用回调函数
//void menu()
//{
//    printf("**  1.add        2.sub  **\n");
//    printf("**  3.mul        4.Div  **\n");
//    printf("**         0.exit       **\n");
//    printf("**************************\n");
//}
//int add(int x,int y)
//{
//    return x+y;
//}
//int sub(int x,int y)
//{
//    return x-y;
//}
//int mul(int x,int y)
//{
//    return x*y;
//}
//int Div(int x,int y)
//{
//    return x/y;
//}
//int main()
//{
//    int input,x,y;
//    do
//    {
//    menu();
//    printf("请选择:>");
//    scanf("%d",&input);
//    switch(input)
//    {
//        case 1:
//            printf("请输入两个操作数:>"); //重复出现
//            scanf("%d%d",&x,&y);
//            printf("%d\n",add(x,y));
//            break;
//        case 2:
//            printf("请输入两个操作数:>"); //重复出现
//            scanf("%d%d",&x,&y);
//            printf("%d\n",sub(x,y));
//            break;
//        case 3:
//            printf("请输入两个操作数:>");//重复出现
//            scanf("%d%d",&x,&y);
//            printf("%d\n",mul(x,y));
//            break;
//        case 4:
//            printf("请输入两个操作数:>");//重复出现
//            scanf("%d%d",&x,&y);
//            printf("%d\n",Div(x,y));
//            break;
//        case 0:
//            printf("退出");
//            break;
//        default:
//            printf("选择错误，请重新选择！\n");
//            break;
//    }
//        }while(input);
//
//    return 0;
//}
//怎么修改呢？

//void menu()
//{
//    printf("**  1.add        2.sub  **\n");
//    printf("**  3.mul        4.Div  **\n");
//    printf("**         0.exit       **\n");
//    printf("**************************\n");
//}
//int add(int x,int y)
//{
//    return x+y;
//}
//int sub(int x,int y)
//{
//    return x-y;
//}
//int mul(int x,int y)
//{
//    return x*y;
//}
//int Div(int x,int y)
//{
//    return x/y;
//}
////写一个calc函数封装我的功能 通过函数指针调用我的函数
//void calc(int (*pf)(int ,int ))
//{
//    int x=0;
//    int y=0;
//    printf("请输入两个操作数:>");
//    scanf("%d%d",&x,&y);
//    printf("%d\n",pf(x,y));
//}
//int main()
//{
//    int input,x,y;
//    do
//    {
//    menu();
//    printf("请选择:>");
//    scanf("%d",&input);
//    switch(input)
//    {
//        case 1:
//            calc(add); //将函数地址传过去
//        case 2:
//            calc(sub);
//            break;
//        case 3:
//            calc(mul);
//            break;
//        case 4:
//            calc(Div);
//            break;
//        case 0:
//            printf("退出");
//            break;
//        default:
//            printf("选择错误，请重新选择！\n");
//            break;
//    }
//        }while(input);
//
//    return 0;
//}
//
////小结一下 前面都学了什么内容
//int main()
//{
//    //指针数组
//    int* arr[10];
//    //数组指针
//    int* (*p)[10]=&arr;
//    //函数指针
//    int (*padd)(int ,int )=add; // add是加法函数
//    //函数指针数组
//    int (*parr[4])(int ,int );
//    //指向函数指针数组的指针
//    int (* (*ppadd)[4] )(int ,int )=&parr;
//    return 0;
//}

//介绍一下void* - 可以接受任意类型的地址
//vodi*类型的指针不可以进行解引用操作   不知道访问几个字节
//void*类型的指针不能够进行加减操作    不知道访问几个字节

//介绍一个函数qsort - 库函数 - stdlib.h 其功能是对任意类型的数据进行排序
//  void qsort(void* base,size_t num,size_t width,int(*cmp)(const void* e1,const void* e2));
        //qsort(arr,sz,sizeof(arr[0]),add)
        // arr：目标数组的起始位置
        //sz:数组的大小（单位元素），数组有几个元素
        //sizeof(arr[0]):每个元素的大小（单位字节）
        //add: 一个类型为     int (*)(const void*,const void*)  的函数指针  可以接受的函数
        //e1 和 e2 是两个被比较元素的地址


////1.先让我们来回顾一下冒泡排序 只能排整形
//void bubsort(int arr[],int sz)
//{
//    int i=0;
//    int j=0;
//    for(i=0;i<sz-1;i++)
//    {
//        int flag = 1;
//        for(j=0;j<sz-1-i;j++)
//        {
//            if(arr[j]<arr[j+1])
//            {
////                arr[j]=arr[j]^arr[j+1];  //按位异或的方法交换两个整形的值
////                arr[j+1]=arr[j]^arr[j+1];
////                arr[j]=arr[j]^arr[j+1];
//                int temp = arr[j];
//                arr[j]=arr[j+1];
//                arr[j+1]=temp;
//                flag = 0;
//            }
//
//        }
//        if(flag==1)
//            break;
//    }
//}
//int main()
//{
//    //如果我想排序一个浮点型数组呢？
//    //亦或者我想要排序一个结构数组呢？
//    //那就来看看qsort这个库函数了
//    int arr[10]={1,2,3,4,5,6,7,8,9,0};
//    int sz = sizeof(arr)/sizeof(arr[0]);
//    bubsort(arr,sz);
//    int i=0;
//    for(i=0;i<sz;i++)
//        printf("%d ",arr[i]);
//    return 0;
//}

//调用qsort函数
//int cmp_int(const void* e1,const void* e2)
//{
//    //比较两个整形值的大小
//    //由于e1 和 e2 都是void*类型 ，无法直接比较大小 所以我首先要强制类型转换
//    return *(int*)e1 - *(int*)e2;
//    //比较的规则如下：  e1 - e2 为升序排列  e2 - e1 为降序排列
//    //  e1 < e2 返回值为一个负数
//    //  e1 = e2 返回值为0
//    //  e1 > e2 返回值为一个正数
//}
//int main()
//{
//    int arr[10]={11,2,3,4,5,6,7,8,9,10};
//    int sz=sizeof(arr)/sizeof(arr[0]);
//    qsort(arr,sz,sizeof(arr[0]),cmp_int);
//    int i=0;
//    for(i=0;i<sz;i++)
//           printf("%d ",arr[i]);
//    return 0;
//}

////调用qsort函数对任何类型数组排序
//int cmp_int(const void* e1,const void* e2)
//{
//    return *(int*)e1-*(int*)e2;
//}
//void test1()
//{
//    int arr[10]={11,1,9,4,5,6,7,8,2,10};
//    int sz=sizeof(arr)/sizeof(arr[0]);
//    qsort(arr,sz,sizeof(arr[0]),cmp_int);
//    int i=0;
//    for(i=0;i<sz;i++)
//           printf("%d ",arr[i]);
//    printf("\n");
//}
//int cmp_float(const void* e1,const void* e2)
//{
//    return *(float*)e2-*(float*)e1;
//}
//void test2()
//{
//    float f[5]={1.5,2.5,0.5,0.1,9.5};
//    int sz=sizeof(f)/sizeof(f[0]);
//    qsort(f,sz,sizeof(f[0]),cmp_float);
//    int i=0;
//    for(i=0;i<sz;i++)
//           printf("%f ",f[i]);
//    printf("\n");
//
//}
//struct stu
//{
//    char name[20];
//    int age;
//};
//int cmp_stu_by_age(const void* e1,const void* e2)
//{
//    return ((struct stu*)e1)->age-((struct stu*)e2)->age;
//}
//int
//void test3()
//{
//    struct stu s[3]={ {"bhangsan",20}, {"aaaa",10}, {"aaaaang",30} };
//    int sz=sizeof(s)/sizeof(s[0]);
//    //用年龄age进行比较
//    qsort(s,sz,sizeof(s[0]),cmp_stu_by_age);
//    int i=0;
//    for(i=0;i<sz;i++)
//        {
//            printf("%s ",s[i].name);
//            printf("%d\n",s[i].age);
//        }
//    //用名字name进行比较
//    qsort(s,sz,sizeof(s[0]),cmp_stu_by_name);
//    for(i=0;i<sz;i++)
//        {
//            printf("%s ",s[i].name);
//            printf("%d\n",s[i].age);
//        }
//
//}
//int main()
//{
//    //给整形数组排序
//    test1();
//    //给单精度浮点型数组排序
//    test2();
//    //给结构数组排序
//    test3();
//    return 0;
//} cmp_stu_by_name(const void* e1,const void* e2)
//{
//    //比较名字就是比较字符串 不能直接比较 需要调用函数strcpm（“字符串1”，“字符串2”） == 返回值 。先比较首字母的ascll码值 相同比较下一个字母 以此类推
//    return strcmp(((struct stu*)e1)->name , ((struct stu*)e2)->name);
//}
