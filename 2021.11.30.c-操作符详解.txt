// //操作符详解！！！！！！！！！！！！！！！！！！！！！！！！
// //1.移位操作符 >>  <<
// int main()
// {
//     //整数的二进制表示有：原码，反码，补码
//     //存储到内存是补码
//     //移位移的也是补码
//     int a=16;//000000000000000000000000010000，正数的原码，反码，补码相同
//     int c=-1;//100000000000000000000000000001-原码
//              //111111111111111111111111111110-反码
//              //111111111111111111111111111111-补码
//              //计算机打印的是原码
//     int b=c>>1;//>>右移操作符，移动的是二进制位
//     printf("%d\n",b);
//     //右移操作符
//     //1.算术右移
//     //右边抛弃，左边补原符号位，负数补1，整数补0
//     //2.逻辑右移
//     //右边丢弃，左边补0
//     //左移操作符
//     //左边抛弃，右边补零
//     return 0;


////2.按位操作符 按位与& 按位或| 按位异或^
////不使用第三个变量，交换两个数的值
//int main()
//{
//    int a=3;
//    int b=5;
//    printf("a=%d b=%d\n",a,b);
////    //方法一，加减法-当a，b很大时可能会溢出
////    a=b+a;
////    b=a-b;
////    a=a-b;
////    printf("a=%d b=%d\n",a,b);
////    //方法二，按位异或法
////      a=a^b;//a=6
////      b=a^b;//b=3
////      a=a^b;//a=5
////      printf("a=%d b=%d\n",a,b);
//
//    return 0;
//}

////3.求一个整数在内存中二进制的1的个数
int main()
{
    int num=0,i=0;
    int count=0;
    scanf("%d",&num);
//    //求补码的1的个数,此方法只能求正数，不能求负数
//    while(num)
//    {
//        if(num%2==1)
//            count++;
//        num/=2;
//    }
//    //方法2，按位与
//    for(i=0;i<32;i++)
//    {
//        if(1==((num>>i)&1))
//            count++;
//    }
//    printf("count=%d\n",count);
//    return 0;