////标题3 整形在内存中的储存
//原码 补码 反码
//无符号数的原码、补码、反码都一样
//正数的原码、补码、反码都一样
//负数特别提出
//int main()
//{
//    int a=20;//4个字节-32bit
//    //二进制-000000000000000000000000000000010100 - 原码   十六进制 0x00000014
//    //二进制-000000000000000000000000000000010100 - 反码
//    //二进制-000000000000000000000000000000010100 - 补码   十六进制 0x00000014
//    int b=-10;
//    //二进制-100000000000000000000000000000010100 - 原码
//    //二进制-111111111111111111111111111111101011 - 反码
//    //二进制-111111111111111111111111111111101110 - 补码   十六进制 0xfffffff6
//    return 0;
//}

//******对于整形来说：数据存放内存中其实存放的是补码

//计算机中的加减法运算只能用补码
//int main()
//{
//    1-1=0
//    1+(-1)=0
//    原码运算
//      00000000000000000000000000000001 - 1
//      10000000000000000000000000000001 - -1
//      10000000000000000000000000000010 - -2  结果显然不对
//      补码运算
//        00000000000000000000000000000001 - 1
//        11111111111111111111111111111111 - -1
//        00000000000000000000000000000000 - 0
//    return 0;
//}

//内存存储中的大端和小端
// 1.大端（存储）模式，也叫大端字节序。是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中。
// 2.小端（存储）模式，也叫小端字节序。是指数据的低位保存在内存的低地址中，而数据的高位，保存在内存的高地址中。
//写一段代码告诉我们当前机器的字节序是什么？
//int main()
//{
//    //0x 00 00 00 01
//    int a=1;//只需要将内存的第一个字节打印出来就行
//    //大端：00 00 00 01  小端：01 00 00 00
//    char* pa=&a;
//    if(*pa==1)
//        printf("小端");
//    else
//        printf("大端");
//    return 0;
//}
//int check_sys()
//{
//    int a=1;
//    char* p=(char*)&a;
//    return *p;
//}
//int main()
//{
//    //写一个函数check_sys()告诉我们当前机器的字节序是什么？
//    //返回1，小端  返回0，大端
//    int ret=check_sys();
//    if(ret==1)
//        printf("小端");
//    else
//        printf("大端");
//    return 0;
//}